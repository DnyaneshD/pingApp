name: Deploy to Server
on:
  push:
    branches:
      - master
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build docker image
        if: success()
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pingapp-repo
        run: docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest . || exit 1

      - name: Push the image to Amazon ECR
        if: success()
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pingapp-repo
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest || exit 1

      - name: Deploy Docker image to ECS
        if: success()
        env:
          ECS_CLUSTER_NAME: ping-app-cluster
          ECS_SERVICE_NAME: ping-app-service
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment

      - name: Logout from Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
